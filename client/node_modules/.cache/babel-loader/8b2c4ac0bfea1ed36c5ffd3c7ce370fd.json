{"ast":null,"code":"var _jsxFileName = \"/Users/ajaykiranreddy/react/AjayUI/ajaui/src/components/apps/sports/CricketPage.jsx\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  backButton: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Live Scores', 'Up coming', 'Completed'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalNonLinearAlternativeLabelStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState(new Set());\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return getSteps().length;\n  };\n\n  const isStepOptional = step => {\n    return step === 1;\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const skippedSteps = () => {\n    return skipped.size;\n  };\n\n  const completedSteps = () => {\n    return completed.size;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps() - skippedSteps();\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !completed.has(i)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = new Set(completed);\n    newCompleted.add(activeStep);\n    setCompleted(newCompleted);\n    /**\n     * Sigh... it would be much nicer to replace the following if conditional with\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\n     * thus we have to resort to not being very DRY.\n     */\n\n    if (completed.size !== totalSteps() - skippedSteps()) {\n      handleNext();\n    }\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted(new Set());\n    setSkipped(new Set());\n  };\n\n  const isStepSkipped = step => {\n    return skipped.has(step);\n  };\n\n  function isStepComplete(step) {\n    return completed.has(step);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep,\n    orientation: 'vertical',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, steps.map((label, index) => {\n    const stepProps = {};\n    const buttonProps = {}; // if (isStepOptional(index)) {\n    //     buttonProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n    // }\n\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n\n    return /*#__PURE__*/React.createElement(Step, Object.assign({\n      key: label\n    }, stepProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(StepButton, Object.assign({\n      onClick: handleStep(index),\n      completed: isStepComplete(index)\n    }, buttonProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }), label));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, allStepsCompleted() ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, \"All steps completed - you're finished\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, \"Reset\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, getStepContent(activeStep)))));\n}","map":{"version":3,"sources":["/Users/ajaykiranreddy/react/AjayUI/ajaui/src/components/apps/sports/CricketPage.jsx"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","useStyles","theme","root","width","button","marginRight","spacing","backButton","completed","display","instructions","marginTop","marginBottom","getSteps","getStepContent","step","HorizontalNonLinearAlternativeLabelStepper","classes","activeStep","setActiveStep","useState","setCompleted","Set","skipped","setSkipped","steps","totalSteps","length","isStepOptional","handleSkip","Error","prevActiveStep","prevSkipped","newSkipped","values","add","skippedSteps","size","completedSteps","allStepsCompleted","isLastStep","handleNext","newActiveStep","findIndex","i","has","handleBack","handleStep","handleComplete","newCompleted","handleReset","isStepSkipped","isStepComplete","map","label","index","stepProps","buttonProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE;AADL,GAD+B;AAIrCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AADT,GAJ6B;AAOrCC,EAAAA,UAAU,EAAE;AACRF,IAAAA,WAAW,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AADL,GAPyB;AAUrCE,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAV0B;AAarCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAEV,KAAK,CAACK,OAAN,CAAc,CAAd,CADD;AAEVM,IAAAA,YAAY,EAAEX,KAAK,CAACK,OAAN,CAAc,CAAd;AAFJ;AAbuB,CAAZ,CAAD,CAA5B;;AAmBA,SAASO,QAAT,GAAoB;AAChB,SAAO,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,CAAP;AACH;;AAED,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,UAAQA,IAAR;AACI,SAAK,CAAL;AACI,aAAO,qCAAP;;AACJ,SAAK,CAAL;AACI,aAAO,sCAAP;;AACJ,SAAK,CAAL;AACI,aAAO,8CAAP;;AACJ;AACI,aAAO,cAAP;AARR;AAUH;;AAED,eAAe,SAASC,0CAAT,GAAsD;AACjE,QAAMC,OAAO,GAAGjB,SAAS,EAAzB;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8B1B,KAAK,CAAC2B,QAAN,CAAe,CAAf,CAApC;AACA,QAAM,CAACZ,SAAD,EAAYa,YAAZ,IAA4B5B,KAAK,CAAC2B,QAAN,CAAe,IAAIE,GAAJ,EAAf,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB/B,KAAK,CAAC2B,QAAN,CAAe,IAAIE,GAAJ,EAAf,CAA9B;AACA,QAAMG,KAAK,GAAGZ,QAAQ,EAAtB;;AAEA,QAAMa,UAAU,GAAG,MAAM;AACrB,WAAOb,QAAQ,GAAGc,MAAlB;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAIb,IAAD,IAAU;AAC7B,WAAOA,IAAI,KAAK,CAAhB;AACH,GAFD;;AAIA,QAAMc,UAAU,GAAG,MAAM;AACrB,QAAI,CAACD,cAAc,CAACV,UAAD,CAAnB,EAAiC;AAC7B;AACA;AACA,YAAM,IAAIY,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAEDX,IAAAA,aAAa,CAAEY,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb;AACAP,IAAAA,UAAU,CAAEQ,WAAD,IAAiB;AACxB,YAAMC,UAAU,GAAG,IAAIX,GAAJ,CAAQU,WAAW,CAACE,MAAZ,EAAR,CAAnB;AACAD,MAAAA,UAAU,CAACE,GAAX,CAAejB,UAAf;AACA,aAAOe,UAAP;AACH,KAJS,CAAV;AAKH,GAbD;;AAeA,QAAMG,YAAY,GAAG,MAAM;AACvB,WAAOb,OAAO,CAACc,IAAf;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzB,WAAO9B,SAAS,CAAC6B,IAAjB;AACH,GAFD;;AAIA,QAAME,iBAAiB,GAAG,MAAM;AAC5B,WAAOD,cAAc,OAAOZ,UAAU,KAAKU,YAAY,EAAvD;AACH,GAFD;;AAIA,QAAMI,UAAU,GAAG,MAAM;AACrB,WAAOtB,UAAU,KAAKQ,UAAU,KAAK,CAArC;AACH,GAFD;;AAIA,QAAMe,UAAU,GAAG,MAAM;AACrB,UAAMC,aAAa,GACfF,UAAU,MAAM,CAACD,iBAAiB,EAAlC,GACM;AACA;AACFd,IAAAA,KAAK,CAACkB,SAAN,CAAgB,CAAC5B,IAAD,EAAO6B,CAAP,KAAa,CAACpC,SAAS,CAACqC,GAAV,CAAcD,CAAd,CAA9B,CAHJ,GAIM1B,UAAU,GAAG,CALvB;AAOAC,IAAAA,aAAa,CAACuB,aAAD,CAAb;AACH,GATD;;AAWA,QAAMI,UAAU,GAAG,MAAM;AACrB3B,IAAAA,aAAa,CAAEY,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb;AACH,GAFD;;AAIA,QAAMgB,UAAU,GAAIhC,IAAD,IAAU,MAAM;AAC/BI,IAAAA,aAAa,CAACJ,IAAD,CAAb;AACH,GAFD;;AAIA,QAAMiC,cAAc,GAAG,MAAM;AACzB,UAAMC,YAAY,GAAG,IAAI3B,GAAJ,CAAQd,SAAR,CAArB;AACAyC,IAAAA,YAAY,CAACd,GAAb,CAAiBjB,UAAjB;AACAG,IAAAA,YAAY,CAAC4B,YAAD,CAAZ;AAEA;;;;;;AAKA,QAAIzC,SAAS,CAAC6B,IAAV,KAAmBX,UAAU,KAAKU,YAAY,EAAlD,EAAsD;AAClDK,MAAAA,UAAU;AACb;AACJ,GAbD;;AAeA,QAAMS,WAAW,GAAG,MAAM;AACtB/B,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,IAAAA,YAAY,CAAC,IAAIC,GAAJ,EAAD,CAAZ;AACAE,IAAAA,UAAU,CAAC,IAAIF,GAAJ,EAAD,CAAV;AACH,GAJD;;AAMA,QAAM6B,aAAa,GAAIpC,IAAD,IAAU;AAC5B,WAAOQ,OAAO,CAACsB,GAAR,CAAY9B,IAAZ,CAAP;AACH,GAFD;;AAIA,WAASqC,cAAT,CAAwBrC,IAAxB,EAA8B;AAC1B,WAAOP,SAAS,CAACqC,GAAV,CAAc9B,IAAd,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEE,OAAO,CAACf,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAU,IAAA,SAAS,MAAnB;AAAoB,IAAA,UAAU,EAAEgB,UAAhC;AAA4C,IAAA,WAAW,EAAE,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKO,KAAK,CAAC4B,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzB,UAAMC,SAAS,GAAG,EAAlB;AACA,UAAMC,WAAW,GAAG,EAApB,CAFyB,CAGzB;AACA;AACA;;AACA,QAAIN,aAAa,CAACI,KAAD,CAAjB,EAA0B;AACtBC,MAAAA,SAAS,CAAChD,SAAV,GAAsB,KAAtB;AACH;;AACD,wBACI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAE8C;AAAX,OAAsBE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACI,oBAAC,UAAD;AACI,MAAA,OAAO,EAAET,UAAU,CAACQ,KAAD,CADvB;AAEI,MAAA,SAAS,EAAEH,cAAc,CAACG,KAAD;AAF7B,OAGQE,WAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKKH,KALL,CADJ,CADJ;AAWH,GApBA,CADL,CADJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,iBAAiB,kBACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEtB,OAAO,CAACP,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,eAII,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEwC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,CADc,gBAQd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEjC,OAAO,CAACP,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CI,cAAc,CAACI,UAAD,CAA5D,CADJ,CATR,CAxBJ,CADJ;AAyCH","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    completed: {\n        display: 'inline-block',\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nfunction getSteps() {\n    return ['Live Scores', 'Up coming', 'Completed'];\n}\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return 'Step 1: Select campaign settings...';\n        case 1:\n            return 'Step 2: What is an ad group anyways?';\n        case 2:\n            return 'Step 3: This is the bit I really care about!';\n        default:\n            return 'Unknown step';\n    }\n}\n\nexport default function HorizontalNonLinearAlternativeLabelStepper() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [completed, setCompleted] = React.useState(new Set());\n    const [skipped, setSkipped] = React.useState(new Set());\n    const steps = getSteps();\n\n    const totalSteps = () => {\n        return getSteps().length;\n    };\n\n    const isStepOptional = (step) => {\n        return step === 1;\n    };\n\n    const handleSkip = () => {\n        if (!isStepOptional(activeStep)) {\n            // You probably want to guard against something like this\n            // it should never occur unless someone's actively trying to break something.\n            throw new Error(\"You can't skip a step that isn't optional.\");\n        }\n\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setSkipped((prevSkipped) => {\n            const newSkipped = new Set(prevSkipped.values());\n            newSkipped.add(activeStep);\n            return newSkipped;\n        });\n    };\n\n    const skippedSteps = () => {\n        return skipped.size;\n    };\n\n    const completedSteps = () => {\n        return completed.size;\n    };\n\n    const allStepsCompleted = () => {\n        return completedSteps() === totalSteps() - skippedSteps();\n    };\n\n    const isLastStep = () => {\n        return activeStep === totalSteps() - 1;\n    };\n\n    const handleNext = () => {\n        const newActiveStep =\n            isLastStep() && !allStepsCompleted()\n                ? // It's the last step, but not all steps have been completed\n                  // find the first step that has been completed\n                steps.findIndex((step, i) => !completed.has(i))\n                : activeStep + 1;\n\n        setActiveStep(newActiveStep);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        setActiveStep(step);\n    };\n\n    const handleComplete = () => {\n        const newCompleted = new Set(completed);\n        newCompleted.add(activeStep);\n        setCompleted(newCompleted);\n\n        /**\n         * Sigh... it would be much nicer to replace the following if conditional with\n         * `if (!this.allStepsComplete())` however state is not set when we do this,\n         * thus we have to resort to not being very DRY.\n         */\n        if (completed.size !== totalSteps() - skippedSteps()) {\n            handleNext();\n        }\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n        setCompleted(new Set());\n        setSkipped(new Set());\n    };\n\n    const isStepSkipped = (step) => {\n        return skipped.has(step);\n    };\n\n    function isStepComplete(step) {\n        return completed.has(step);\n    }\n\n    return (\n        <div className={classes.root}>\n            <Stepper  nonLinear activeStep={activeStep} orientation={'vertical'}>\n                {steps.map((label, index) => {\n                    const stepProps = {};\n                    const buttonProps = {};\n                    // if (isStepOptional(index)) {\n                    //     buttonProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                    // }\n                    if (isStepSkipped(index)) {\n                        stepProps.completed = false;\n                    }\n                    return (\n                        <Step key={label} {...stepProps}>\n                            <StepButton\n                                onClick={handleStep(index)}\n                                completed={isStepComplete(index)}\n                                {...buttonProps}\n                            >\n                                {label}\n                            </StepButton>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n            <div>\n                {allStepsCompleted() ? (\n                    <div>\n                        <Typography className={classes.instructions}>\n                            All steps completed - you&apos;re finished\n                        </Typography>\n                        <Button onClick={handleReset}>Reset</Button>\n                    </div>\n                ) : (\n                    <div>\n                        <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}