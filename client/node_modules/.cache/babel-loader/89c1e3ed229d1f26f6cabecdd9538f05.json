{"ast":null,"code":"var _jsxFileName = \"/Users/ajaykiranreddy/react/AjayUI/ajaui/src/components/apps/sports/CricketPage.jsx\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Step 1: Select campaign settings...';\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalNonLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, steps.map((label, index) => /*#__PURE__*/React.createElement(Step, {\n    key: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StepButton, {\n    onClick: handleStep(index),\n    completed: completed[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, label)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, allStepsCompleted() ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, \"All steps completed - you're finished\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, \"Reset\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }, getStepContent(activeStep)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, \"Next\"), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 33\n    }\n  }, \"Step \", activeStep + 1, \" already completed\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 33\n    }\n  }, completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));\n}","map":{"version":3,"sources":["/Users/ajaykiranreddy/react/AjayUI/ajaui/src/components/apps/sports/CricketPage.jsx"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","useStyles","theme","root","width","button","marginRight","spacing","completed","display","instructions","marginTop","marginBottom","getSteps","getStepContent","step","HorizontalNonLinearStepper","classes","activeStep","setActiveStep","useState","setCompleted","steps","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","map","label","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    completed: {\n        display: 'inline-block',\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nfunction getSteps() {\n    return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return 'Step 1: Select campaign settings...';\n        case 1:\n            return 'Step 2: What is an ad group anyways?';\n        case 2:\n            return 'Step 3: This is the bit I really care about!';\n        default:\n            return 'Unknown step';\n    }\n}\n\nexport default function HorizontalNonLinearStepper() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [completed, setCompleted] = React.useState({});\n    const steps = getSteps();\n\n    const totalSteps = () => {\n        return steps.length;\n    };\n\n    const completedSteps = () => {\n        return Object.keys(completed).length;\n    };\n\n    const isLastStep = () => {\n        return activeStep === totalSteps() - 1;\n    };\n\n    const allStepsCompleted = () => {\n        return completedSteps() === totalSteps();\n    };\n\n    const handleNext = () => {\n        const newActiveStep =\n            isLastStep() && !allStepsCompleted()\n                ? // It's the last step, but not all steps have been completed,\n                  // find the first step that has been completed\n                steps.findIndex((step, i) => !(i in completed))\n                : activeStep + 1;\n        setActiveStep(newActiveStep);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleStep = (step) => () => {\n        setActiveStep(step);\n    };\n\n    const handleComplete = () => {\n        const newCompleted = completed;\n        newCompleted[activeStep] = true;\n        setCompleted(newCompleted);\n        handleNext();\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n        setCompleted({});\n    };\n\n    return (\n        <div className={classes.root}>\n            <Stepper nonLinear activeStep={activeStep}>\n                {steps.map((label, index) => (\n                    <Step key={label}>\n                        <StepButton onClick={handleStep(index)} completed={completed[index]}>\n                            {label}\n                        </StepButton>\n                    </Step>\n                ))}\n            </Stepper>\n            <div>\n                {allStepsCompleted() ? (\n                    <div>\n                        <Typography className={classes.instructions}>\n                            All steps completed - you&apos;re finished\n                        </Typography>\n                        <Button onClick={handleReset}>Reset</Button>\n                    </div>\n                ) : (\n                    <div>\n                        <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                        <div>\n                            <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                                Back\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleNext}\n                                className={classes.button}\n                            >\n                                Next\n                            </Button>\n                            {activeStep !== steps.length &&\n                            (completed[activeStep] ? (\n                                <Typography variant=\"caption\" className={classes.completed}>\n                                    Step {activeStep + 1} already completed\n                                </Typography>\n                            ) : (\n                                <Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\n                                    {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\n                                </Button>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}